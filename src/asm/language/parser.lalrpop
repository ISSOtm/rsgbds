use std::{cell::RefCell, rc::Rc};

use rgbds::{
    rpn::Command as RpnCommand,
    section::{Kind as SectionKind, Modifier as SectionModifier},
};

use crate::{
    error::Reporter,
    expr::Expression,
    fstack::Fstack,
    instructions::*,
    language::WarningKind,
    macro_args::MacroArgs,
    opt::RuntimeOptStack,
    sections::{SectConstraints, SectionAttributes, Sections},
    symbols::Symbols,
};

use super::{AsmError, AsmErrorKind, lexer::Mode as LexerMode, Lexer, Location, ObsoleteKind, Token, Warning};

grammar<'fstack>(
    runtime_opts: &RefCell<RuntimeOptStack>,
    fstack: &'fstack Fstack,
    lexer: &RefCell<Lexer>,
    macro_args: &RefCell<Vec<MacroArgs>>,
    sections: &RefCell<Sections<'fstack>>,
    symbols: &RefCell<Symbols<'fstack>>,
    reporter: &RefCell<Reporter>,
);

// The grammar proper.

pub TranslationUnit: () = (DiffMark? Line)*;

DiffMark: () = {
    <begin:@L> "+" <end:@R> => {
        reporter.borrow_mut().report_error(
            fstack,
            AsmError::new(begin, end, AsmErrorKind::DiffMark('+')).into(),
        );
    },
    <begin:@L> "-" <end:@R> => {
        reporter.borrow_mut().report_error(
            fstack,
            AsmError::new(begin, end, AsmErrorKind::DiffMark('-')).into(),
        );
    },
}

Line: () = {
    MacroDef,
    LineDirective,
    SimpleLine newline,

    <!> newline => {
        reporter.borrow_mut().report_error(fstack, <>.error);
        // Reset lexer mode.
        let mut lexer = lexer.borrow_mut();
        lexer.expand_equs = true;
        lexer.mode = LexerMode::Normal;
    },
}


// Technically, this could be factored into `SimpleLine`, but since it spans multiple lines, that'd be confusing.
MacroDef: () = {
    // The `body` here consumes up to and including the `endm`, but not its newline.
    <name:MacroDefHeader> newline <body:string> newline => {
        let (name_begin, name_end, name) = name;
        if let Err(err) =
                symbols.borrow_mut().def_macro(name_begin, name, name_end, Rc::new(body)) {
            reporter.borrow_mut().report_error(fstack, err.into());
        }
    },
    <err:BadMacroDefHeader> newline string newline => {
        reporter.borrow_mut().report_error(fstack, err.into());
    }
}
MacroDefHeader: (Location<'fstack>, Location<'fstack>, String) = {
    "macro" <begin:@L> <name:identifier> <end:@R> lookahead_hack => {
        let mut lexer = lexer.borrow_mut();
        lexer.expand_equs = true; // This was reset when lexing the `MACRO`.
        lexer.mode = LexerMode::CaptureMacroBody; // This will automatically reset when lexing the `ENDM`.
        (begin, end, name)
    },
    <begin:@L> <name:label> <end:@R> ":" "macro" => {
        // TODO: warn about deprecated construct

        let mut lexer = lexer.borrow_mut();
        lexer.expand_equs = true; // This was reset when lexing the `MACRO`.
        lexer.mode = LexerMode::CaptureMacroBody; // This will automatically reset when lexing the `ENDM`.
        (begin, end, name)
    },
}
BadMacroDefHeader: AsmError<'fstack> = {
    // We still do the setup to lex the macro body for those, as not doing so would produce a *lot* of spurious syntax errors.
    "macro" <begin:@L> local_ident <end:@R> => {
        let mut lexer = lexer.borrow_mut();
        lexer.expand_equs = true; // This was reset when lexing the `MACRO`.
        lexer.mode = LexerMode::CaptureMacroBody; // This will automatically reset when lexing the `ENDM`.

        AsmError::new(begin, end, AsmErrorKind::IllegalLocal)
    },
    <begin:@L> local_ident <end:@R> ":" "macro" => {
        // TODO: warn about deprecated construct

        let mut lexer = lexer.borrow_mut();
        lexer.expand_equs = true; // This was reset when lexing the `MACRO`.
        lexer.mode = LexerMode::CaptureMacroBody; // This will automatically reset when lexing the `ENDM`.

        AsmError::new(begin, end, AsmErrorKind::IllegalLocal)
    }
}


LineDirective: () = {} // TODO: `include`, `if`, etc.


SimpleLine: () = {
    LabelDef?,
    LabelDef? MacroInvocation,
    LabelDef? <begin:@L> <instr:Instruction> <end:@R> => {
        let mut sections = sections.borrow_mut();
        match instr {
            Err(error) => Ok(Err(error.into())),
            Ok(instr) => Encoder::new(instr).map(|encoder| {
                let mut section = sections.active_section_mut().ok_or(AsmErrorKind::InstrOutsideSection)?;
                section.extend(
                    encoder,
                    |warning| reporter.borrow_mut().warn(
                        fstack,
                        warning,
                        &runtime_opts.borrow().cur_options().warn_settings,
                    )
                )
            }),
        }
            .and_then(|res| res.map_err(|kind| AsmError::new(begin, end, kind)))
            .unwrap_or_else(|error| reporter.borrow_mut().report_error(fstack, error.into()))
    },
    LabelDef? Directive,
    "endc" => todo!(), // This can only be preceded by whitespace on its line.
}


LabelDef: () = {
    ":" => todo!(), // Anonymous label
    <name:label> <exported:LabelDefKind> => {
        let mut sections = sections.borrow_mut();
        todo!();
    },
    <name:local_ident> <exported:LabelDefKind> => {
        todo!();
    },
}
LabelDefKind: bool = {
    ":" => false,
    "::" => true,
}


MacroInvocation: () = {
    // The argument list is only a list of strings, not comma-separated; see `Tokenizer::next_raw()`
    // for more information.
    <begin:@L> <name:MacroName> <end:@R> lookahead_hack <args:MacroArg*> => {
        match symbols.borrow_mut().get_macro(&name) {
            Err(kind) => reporter.borrow_mut().report_error(fstack, AsmError::new(begin, end, kind).into()),

            Ok((_, body)) => {
                let args = MacroArgs::new(args);
                macro_args.borrow_mut().push(args);

                let mut lexer = lexer.borrow_mut();
                fstack.push_macro(Rc::clone(body), &mut lexer);
            }
        }
    },
}
// This action code will be executed after the `lookahead_hack` token is obtained from the lexer.
MacroName: String = <identifier> => {
    lexer.borrow_mut().mode = LexerMode::Raw;
    <>
};
MacroArg: Rc<String> = {
    <begin:@L> <string:string> <end:@R> => {
        if string.is_empty() {
            reporter.borrow_mut().warn(
                fstack,
                Warning { begin, end, kind: WarningKind::EmptyMacroArg },
                &runtime_opts.borrow().cur_options().warn_settings,
            );
        }
        Rc::new(string)
    },
}


Directive: () = {
    // "Meta" directives.
    PrintDirective,
    <begin:@L> "warn" <msg:StringExpr> <end:@R> => {
        reporter.borrow_mut().warn(
            fstack,
            Warning { begin, end, kind: WarningKind::User(msg) },
            &runtime_opts.borrow().cur_options().warn_settings,
        )
    },
    "fail" <begin:@L> <msg:StringExpr> <end:@R> => {
        reporter.borrow_mut().report_fatal_error(fstack, AsmError::new(begin, end, AsmErrorKind::Fail(msg)).into());
    },
    "shift" <amount:NumExpr<Term>?> => todo!(),
    "assert" => todo!(),
    "static_assert" => todo!(),

    // Symbol definitions.
    // TODO: `redef`
    // TODO: mutable definitions (`=`, etc.)
    <name:DefIdent> "equ" <expr:NumExpr<Term>> => {
        let res = expr.try_eval(&symbols.borrow(), macro_args.borrow().last(), &sections.borrow());
        res.and_then(|(value, _, _)| symbols.borrow_mut().def_constant(name.0, name.1, name.2, value, false))
            .unwrap_or_else(|error| reporter.borrow_mut().report_error(fstack, error.into()));
    },
    <name:DefIdent> "equs" <string:StringExpr> => {
        symbols.borrow_mut()
            .def_string(name.0, name.1, name.2, Rc::new(string))
            .unwrap_or_else(|error| reporter.borrow_mut().report_error(fstack, error.into()))
    },
    "rsreset" => {
        let mut symbols = symbols.borrow_mut();
        let rs = symbols.get_rs();
        *rs = 0;
    },
    "rsset" <expr:NumExpr<Term>> => {
        let res = expr.try_eval(&symbols.borrow(), macro_args.borrow().last(), &sections.borrow());
        res.map(|(value, _, _)| {
            let mut symbols = symbols.borrow_mut();
            let rs = symbols.get_rs();
            *rs += value;
        }).unwrap_or_else(|error| reporter.borrow_mut().report_error(fstack, error.into()));
    },
    // RB, RW, RL.
    <name:DefIdent> <width:RsDefKind> <expr:NumExpr<Term>> => {
        let res = expr.try_eval(&symbols.borrow(), macro_args.borrow().last(), &sections.borrow());
        res.and_then(|(value, _, _)| {
            let mut symbols = symbols.borrow_mut();
            let rs = symbols.get_rs();
            let old_rs_value = *rs;
            *rs += value * width;
            symbols.def_constant(name.0, name.1, name.2, old_rs_value, false)
        }).unwrap_or_else(|error| reporter.borrow_mut().report_error(fstack, error.into()));
    },

    // Symbol manipulation.
    "export",
    Purge => lexer.borrow_mut().expand_equs = true, // This was disabled by lexing the `purge` token.

    // Section management.
    SectionDef,
    "load",
    "endl",
    "pushs" => todo!(),
    "pops" => todo!(),

    // Data management.
    "ds",
    "db",
    "dw",
    "dl",
    "incbin",
    "union" => todo!(),
    "nextu" => todo!(),
    "endu" => todo!(),
    "align",

    // Charmap management.
    "charmap",
    "newcharmap",
    "setcharmap",
    "pushc" => todo!(),
    "popc" => todo!(),

    // Option management.
    <opt_begin:@L> "opt" <opt_end:@R> <opt_strings:CommaList<(@L string @R)>> => { // Note that encountering `opt` automatically switches to "raw mode".
        let res = if opt_strings.is_empty() {
            Err(AsmError::new(opt_begin, opt_end, AsmErrorKind::EmptyOpt))
        } else {
            (|| {
                let mut opts = runtime_opts.borrow_mut();
                let cur_opts = opts.cur_options_mut();

                for (begin, string, end) in opt_strings {
                    match string.chars().next() {
                        Some(c) => cur_opts.parse_option(c, &string[c.len_utf8()..]),
                        None => todo!(),
                    }.map_err(|kind| AsmError::new(begin, end, kind))?
                }
                Ok(())
            })()
        };

        if let Err(err) = res {
            reporter.borrow_mut().report_error(fstack, err.into());
        }
    },
    "pusho" => runtime_opts.borrow_mut().push(),
    <begin:@L> "popo" <end:@R> => {
        if let Err(err) = runtime_opts.borrow_mut().pop() {
            reporter.borrow_mut().report_error(fstack, AsmError::new(begin, end, err).into());
        }
    },
}

RsDefKind: i32 = { "rb" => 1, "rw" => 2, "rl" => 4 }

PrintDirective: () = {
    "print" CommaList<PrintExpr>,
    "println" CommaList<PrintExpr> => println!(), // Print the trailing EOL.
}
PrintExpr: () = {
    <string:StringExpr> => print!("{}", string),
    <expr:NumExpr<TermNoStr>> => {
        match expr.try_eval(&symbols.borrow(), macro_args.borrow().last(), &sections.borrow()) {
            Err(err) => reporter.borrow_mut().report_error(fstack, err.into()),
            Ok((value, _, _)) => print!("${:X}", value as u32),
        }
    },
}


// Symbol destruction.
Purge: () = {
    "purge" <CommaList<PurgeSymName>> => {
        for (begin, name, end) in <> {
            match symbols.borrow_mut().purge(&name) {
                Ok(()) => (),
                Err(kind) => reporter.borrow_mut().report_error(fstack, AsmError::new(begin, end, kind).into()),
            }
        }
    },
}
PurgeSymName = <@L> <AnyIdent> <@R>;


// Section definition.

SectionDef: () = {
    <begin:@L> "section" <modifier:SectModifier> <name:StringExpr> "," <kind:SectKind> <addr:SectAddress?> <attrs:SectAttributes> <end:@R> => {
        let mut sections = sections.borrow_mut();

        SectConstraints::try_new(
            kind, addr, attrs, begin, end, &symbols.borrow(), macro_args.borrow().last(), &mut sections,
        )
            .and_then(|(attrs, begin, end)| sections.add_section(name, kind, modifier, attrs, begin, end,))
            .unwrap_or_else(|err| reporter.borrow_mut().report_error(fstack, err.into()))
    }
}

SectModifier: SectionModifier = {
    () => SectionModifier::Normal,
    "union" => SectionModifier::Union,
    "fragment" => SectionModifier::Fragment,
}

SectKind: SectionKind = {
    "wram0" => SectionKind::Wram0,
    "vram" => SectionKind::Vram,
    "romx" => SectionKind::Romx,
    "rom0" => SectionKind::Rom0,
    "hram" => SectionKind::Hram,
    "wramx" => SectionKind::Wramx,
    "sram" => SectionKind::Sram,
    "oam" => SectionKind::Oam,
}

SectAddress: Expression<'fstack> = "[" <NumExpr<Term>> "]";

SectAttributes: SectionAttributes<'fstack> = {
    () => Default::default(),
    <mut attrs:SectAttributes> "," "bank" "[" <bank:NumExpr<Term>> "]" => {
        attrs.bank = Some(bank);
        attrs
    },
    <mut attrs:SectAttributes> "," "align" "[" <align:NumExpr<Term>> <ofs:("," <NumExpr<Term>>)?> "]" => {
        attrs.alignment = Some(align);
        attrs.offset = ofs;
        attrs
    }
}


// Instructions.

Instruction: Result<Instruction<'fstack>, BadInstructionKind> = {
    "nop" => Ok(Instruction::Nop),

    "ld" "[" <addr:NumExpr<Term>> "]" "," <reg:Reg16> => Instruction::ld_addr16_sp(addr, reg),

    "stop" <begin:@L> <byte:NumExpr<Term>?> <end:@R> => {
        Ok(Instruction::Stop(byte.unwrap_or_else(|| Expression::constant(begin, end, 0))))
    },

    "jr" <NumExpr<Term>> => Ok(Instruction::Jr(<>)),
    "jr" <cond:Condition> "," <dest:NumExpr<Term>> => Ok(Instruction::JrCond(cond, dest)),

    "ld" <dest:Reg16> "," <value:NumExpr<Term>> => Ok(Instruction::LdImm16(dest, value)),

    "add" <lhs:Reg16Stack> "," <rhs:Reg16> => Instruction::add16(lhs, rhs),

    "ld" "[" <dest:Reg16Ind> "]" "," <src:Reg8> => Instruction::ld_reg16_ind_a(dest, src),
    "ld" "[" <dest:Reg16Ind> "]" "," <src:NumExpr<Term>> => {
        Err(BadInstructionKind::ToReg16Ind(dest, None))
    },

    "ld" <dest:Reg8> "," "[" <src:Reg16Ind> "]" => Instruction::ld_a_reg16_ind(dest, src),

    "inc" <Reg16> => Ok(Instruction::IncReg16(<>)),

    "dec" <Reg16> => Ok(Instruction::DecReg16(<>)),

    "inc" <Reg8> => Ok(Instruction::IncReg8(<>)),

    "dec" <Reg8> => Ok(Instruction::DecReg8(<>)),

    "ld" <dest:Reg8> "," <expr:NumExpr<Term>> => Ok(Instruction::LdImm8(dest, expr)),

    "rlca" => Ok(Instruction::Rlca),

    "rrca" => Ok(Instruction::Rrca),

    "rla" => Ok(Instruction::Rla),

    "rra" => Ok(Instruction::Rra),

    "daa" => Ok(Instruction::Daa),
    "daa" "a" => Err(BadInstructionKind::Daa),

    "cpl" <Reg8?> => Instruction::cpl(<>),

    "scf" => Ok(Instruction::Scf),

    "ccf" => Ok(Instruction::Ccf),

    "ld" <dest:Reg8> "," <src:Reg8> => Instruction::ld_reg8_reg8(dest, src),

    "halt" => Ok(Instruction::Halt),

    "add" <dest:(<Reg8> ",")?> <src:Reg8> => Instruction::add(dest, src),

    "adc" <dest:(<Reg8> ",")?> <src:Reg8> => Instruction::adc(dest, src),

    "sub" <dest:(<Reg8> ",")?> <src:Reg8> => Instruction::sub(dest, src),

    "sbc" <dest:(<Reg8> ",")?> <src:Reg8> => Instruction::sbc(dest, src),

    "and" <dest:(<Reg8> ",")?> <src:Reg8> => Instruction::and(dest, src),

    "xor" <dest:(<Reg8> ",")?> <src:Reg8> => Instruction::xor(dest, src),

    "or" <dest:(<Reg8> ",")?> <src:Reg8> => Instruction::or(dest, src),

    "cp" <dest:(<Reg8> ",")?> <src:Reg8> => Instruction::cp(dest, src),

    "ret" <Condition> => Ok(Instruction::RetCond(<>)),

    "ldh" "[" <dest:NumExpr<Term>> "]" "," <src:Reg8> => Instruction::ld_hram_a(dest, src),

    "add" "sp" "," <NumExpr<Term>> => Ok(Instruction::AddSpRel8(<>)),

    "ldh" <dest:Reg8> "," "[" <src:NumExpr<Term>> "]" => Instruction::ld_a_hram(dest, src),

    "ld" "hl" "," "sp" <NumOfs> => Ok(Instruction::LdHlSpRel8(<>)),

    "pop" <Reg16Stack> => Ok(Instruction::Pop(<>)),

    "ret" => Ok(Instruction::Ret),

    "reti" => Ok(Instruction::Reti),

    "jp" <Reg16> => Instruction::jp(<>),
    "jr" <Reg16> => Err(BadInstructionKind::JrInd(<>)),

    "ld" "sp" "," <Reg16Stack> => Instruction::ld_sp_reg16(<>),

    "jp" <cond:Condition> "," <dest:NumExpr<Term>> => Ok(Instruction::JpCond(cond, dest)),
    "jp" <cond:Condition> "," <dest:Reg16> => Err(BadInstructionKind::JpCond(cond, dest)),
    "jr" <cond:Condition> "," <dest:Reg16> => Err(BadInstructionKind::JrCond(cond, dest)),

    <begin:@L> <is_ld:LdOrLdh> "[" <dest:Reg8> "]" "," <src:Reg8> <end:@R> => {
        Instruction::ldh_c_a(dest, src).map(|instr| {
            if is_ld {
                reporter.borrow_mut().warn(
                    fstack,
                    Warning { begin, end, kind: ObsoleteKind::LdCA.into() },
                    &runtime_opts.borrow().cur_options().warn_settings,
                );
            }
            instr
        })
    },
    "ldh" <dest:CInd> "," <src:Reg8> => Instruction::ldh_c_a(dest, src),
    "ld" <dest:CInd> "," <src:Reg8> => Instruction::ldh_c_a(dest, src),

    "ld" "[" <dest:NumExpr<Term>> "]" "," <src:Reg8> => Instruction::ld_addr16_a(dest, src),

    <begin:@L> <is_ld:LdOrLdh> <dest:Reg8> "," "[" <src:Reg8> "]" <end:@R> => {
        Instruction::ldh_a_c(dest, src).map(|instr| {
            if is_ld {
                reporter.borrow_mut().warn(
                    fstack,
                    Warning { begin, end, kind: ObsoleteKind::LdAC.into() },
                    &runtime_opts.borrow().cur_options().warn_settings,
                );
            }
            instr
        })
    },
    "ldh" <dest:Reg8> "," <src:CInd> => Instruction::ldh_a_c(dest, src),
    "ld" <dest:Reg8> "," <src:CInd> => Instruction::ldh_a_c(dest, src),

    "ld" <dest:Reg8> "," "[" <src:NumExpr<Term>> "]" => Instruction::ld_a_addr16(dest, src),

    "jp" <NumExpr<Term>> => Ok(Instruction::Jp(<>)),

    "di" => Ok(Instruction::Di),

    "ei" => Ok(Instruction::Ei),

    "call" <cond:Condition> "," <dest:NumExpr<Term>> => Ok(Instruction::CallCond(cond, dest)),
    "call" Condition "," <Reg16> => Err(BadInstructionKind::CallCond(<>)),

    "push" <Reg16Stack> => Ok(Instruction::Push(<>)),

    "call" <NumExpr<Term>> => Ok(Instruction::Call(<>)),
    "call" <Reg16> => Err(BadInstructionKind::CallInd(<>)),

    "add" <dest:(<Reg8> ",")?> <src:NumExpr<Term>> => Instruction::add_imm8(dest, src),

    "adc" <dest:(<Reg8> ",")?> <src:NumExpr<Term>> => Instruction::adc_imm8(dest, src),

    "sub" <dest:(<Reg8> ",")?> <src:NumExpr<Term>> => Instruction::sub_imm8(dest, src),

    "sbc" <dest:(<Reg8> ",")?> <src:NumExpr<Term>> => Instruction::sbc_imm8(dest, src),

    "and" <dest:(<Reg8> ",")?> <src:NumExpr<Term>> => Instruction::and_imm8(dest, src),

    "xor" <dest:(<Reg8> ",")?> <src:NumExpr<Term>> => Instruction::xor_imm8(dest, src),

    "or" <dest:(<Reg8> ",")?> <src:NumExpr<Term>> => Instruction::or_imm8(dest, src),

    "cp" <dest:(<Reg8> ",")?> <src:NumExpr<Term>> => Instruction::cp_imm8(dest, src),

    "rst" <NumExpr<Term>> => Ok(Instruction::Rst(<>)),

    <instr:PrefixedInstr> <reg:Reg8> => Ok(Instruction::Prefixed(instr, reg)),

    // The only two that are valid are `ld sp, hl` and `ld hl, sp (+/- ofs)`, which aren't these.
    "ld" <dest:Reg16Stack> "," <src:Reg16Stack> => Err(BadInstructionKind::LdReg16Reg16 { dest, src }),
    // The only 16-bit reg not in `Reg16Stack` is SP, so cover it as well.
    // `ld sp, Reg16Stack` has already been covered.
    "ld" <Reg16Stack> "," "sp" => Err(BadInstructionKind::LdReg16Sp(<>)),
    "ld" "sp" "," "sp" => Err(BadInstructionKind::LdSpSp),
}

PrefixedInstr: PrefixKind = {
    "rlc" => PrefixKind::Rlc,
    "rrc" => PrefixKind::Rrc,
    "rl" => PrefixKind::Rl,
    "rr" => PrefixKind::Rr,
    "sla" => PrefixKind::Sla,
    "sra" => PrefixKind::Sra,
    "swap" => PrefixKind::Swap,
    "srl" => PrefixKind::Srl,
    "bit" <NumExpr<Term>> "," => PrefixKind::Bit(todo!()),
    "set" <NumExpr<Term>> "," => PrefixKind::Set(todo!()),
    "res" <NumExpr<Term>> "," => PrefixKind::Res(todo!()),
}

Reg8: Reg8 = {
    B => Reg8::B,
    C => Reg8::C,
    D => Reg8::D,
    E => Reg8::E,
    H => Reg8::H,
    L => Reg8::L,
    "[" "hl" "]" => Reg8::HlInd,
    A => Reg8::A,
}

B: () = { "b", "high" "(" "bc" ")" }
C: () = { "c", "low" "(" "bc" ")" }

D: () = { "d", "high" "(" "de" ")" }
E: () = { "e", "low" "(" "de" ")" }

H: () = { "h", "high" "(" "hl" ")" }
L: () = { "l", "low" "(" "hl" ")" }

A: () = { "a", "high" "(" "af" ")" }

#[inline]
Reg16: Reg16 = {
    "bc" => Reg16::Bc,
    "de" => Reg16::De,
    "hl" => Reg16::Hl,
    "sp" => Reg16::Sp,
}

#[inline]
Reg16Ind: Reg16Ind = {
    "bc" => Reg16Ind::Bc,
    "de" => Reg16Ind::De,
    HlInc => Reg16Ind::Hli,
    HlDec => Reg16Ind::Hld,
}

HlInc: () = {
    "hli",
    "hl" "+",
}

HlDec: () = {
    "hld",
    "hl" "-",
}

#[inline]
Reg16Stack: Reg16Stack = {
    "bc" => Reg16Stack::Bc,
    "de" => Reg16Stack::De,
    "hl" => Reg16Stack::Hl,
    "af" => Reg16Stack::Af,
}

Condition: Condition = {
    "nz" => Condition::Nz,
    "z" => Condition::Z,
    "nc" => Condition::Nc,
    "c" => Condition::C,
    ! <Condition> => !<>,
}

#[inline]
LdOrLdh: bool = { "ld" => true, "ldh" => false }

CInd: Reg8 = "[" <base:AddSub<Term>> "+" <ofs:Reg8> "]" => {
    match base.try_eval(&symbols.borrow(), macro_args.borrow().last(), &sections.borrow()) {
        Err(err) => reporter.borrow_mut().report_error(fstack, err.into()),
        Ok((0xff00, _, _)) => {}
        Ok((_, begin, end)) => {
            reporter.borrow_mut().report_error(fstack, AsmError::new(begin, end, todo!()).into());
        }
    };
    ofs
};


// Numeric expressions.
// The rules are ordered by increasing precedence.
// The `<T>` argument is either `Term` or `TermNoStr` for productions that handle strings specially.

NumExpr<T>: Expression<'fstack> = {
    <begin:@L> "!" <expr:BoolShortCircuit<T>> <end:@R> => {
        expr.unary_op(begin, RpnCommand::LogicNot, end)
    },
    // TODO: builtins
    <begin:@L> "def" "(" <expr:DefAnyIdent> ")" <end:@R> => {
        todo!();
    },
    <begin:@L> "low" "(" <expr:NumExpr<T>> ")" <end:@R> => {
        expr.low(begin, end)
    },
    <begin:@L> "high" "(" <expr:NumExpr<T>> ")" <end:@R> => {
        todo!();
    },
    <begin:@L> "opcode" "(" <expr:Instruction> ")" <end:@R> => {
        todo!();
    },
    // TODO: user-defined functions
    <BoolShortCircuit<T>>,
}
DefAnyIdent: String = {
    // This identifier is followed by a ")", so the action will be run in time.
    <AnyIdent> => {
        // Cancel the effect of lexing the `def`.
        lexer.borrow_mut().expand_equs = true;
        <>
    }
}

BoolShortCircuit<T>: Expression<'fstack> = {
    <begin:@L> <lhs:BoolShortCircuit<T>> <op:BoolShortCircuitOp> <rhs:Comparison<T>> <end:@R> => {
        lhs.binary_op(begin, op, rhs, end)
    },
    <Comparison<T>>,
}
BoolShortCircuitOp: RpnCommand = {
    "&&" => RpnCommand::LogicAnd,
    "||" => RpnCommand::LogicOr,
}

Comparison<T>: Expression<'fstack> = {
    // TODO
    <AddSub<T>>,
}

AddSub<T>: Expression<'fstack> = {
    <begin:@L> <lhs:AddSub<T>> <op:AddSubOp> <rhs:BitOp<T>> <end:@R> => {
        lhs.binary_op(begin, op, rhs, end)
    },
    <BitOp<T>>,
}
AddSubOp: RpnCommand = {
    "+" => RpnCommand::Add,
    "-" => RpnCommand::Sub,
}

BitOp<T>: Expression<'fstack> = {
    // TODO
    <UnsignedRightShift<T>>,
}

UnsignedRightShift<T>: Expression<'fstack> = {
    <begin:@L> <lhs:UnsignedRightShift<T>> ">>>" <rhs:RightShift<T>> <end:@R> => {
        lhs.binary_op(begin, RpnCommand::Ushr, rhs, end)
    },
    <RightShift<T>>,
}

RightShift<T>: Expression<'fstack> = {
    <begin:@L> <lhs:RightShift<T>> ">>" <rhs:LeftShift<T>> <end:@R> => {
        lhs.binary_op(begin, RpnCommand::Shr, rhs, end)
    },
    <LeftShift<T>>,
}

LeftShift<T>: Expression<'fstack> = {
    <begin:@L> <lhs:LeftShift<T>> "<<" <rhs:Factor<T>> <end:@R> => {
        lhs.binary_op(begin, RpnCommand::Shl, rhs, end)
    },
    <Factor<T>>,
}

Factor<T>: Expression<'fstack> = {
    <begin:@L> <lhs:Factor<T>> <op:FactorOp> <rhs:Unaries<T>> <end:@R> => {
        lhs.binary_op(begin, op, rhs, end)
    },
    <Unaries<T>>,
}
FactorOp: RpnCommand = {
    "*" => RpnCommand::Mul,
    "/" => RpnCommand::Div,
    "%" => RpnCommand::Mod,
}

Unaries<T>: Expression<'fstack> = {
    <begin:@L> <op:UnariesOp> <expr:Unaries<T>> <end:@R> => {
        expr.unary_op(begin, op, end)
    },
    <begin:@L> "+" <mut expr:Unaries<T>> => { expr.begin = begin; expr },
    <Exponent<T>>,
}
UnariesOp: RpnCommand = {
    "~" => RpnCommand::Complement,
    "-" => RpnCommand::Neg,
}

Exponent<T>: Expression<'fstack> = {
    <begin:@L> <raised:Exponent<T>> "**" <exponent:T> <end:@R> => {
        raised.binary_op(begin, RpnCommand::Exponent, exponent, end)
    },
    <T>,
}

Term: Expression<'fstack> = {
    <TermNoStr>,
    <StringExpr> => todo!(),
}
TermNoStr: Expression<'fstack> = {
    <begin:@L> <value:number> <end:@R> => Expression::constant(begin, end, value),
    <begin:@L> <sym_name:AnyIdent> <end:@R> => {
        let id = symbols.borrow_mut().add_num_ref(&sym_name, &begin, &end);
        Expression::symbol(begin, end, id)
    },
    <begin:@L> <anon_ref:anon_label_ref> <end:@R> => Expression::symbol(begin, end, todo!()),
    "(" <NumExpr<Term>> ")" => <>, // Strings are always processed numerically between parens.
}

// A few special expressions.

NumOfs: Expression<'fstack> = {
    "+" <NumExpr<Term>>,
    <begin:@L> "-" <expr:NumExpr<Term>> <end:@L> => expr.unary_op(begin, RpnCommand::Neg, end),
}


// String expressions.

StringExpr: String = {
    <string>,
    "strsub" "(" <string:StringExpr> "," <start:NumExpr<Term>> <end:("," <NumExpr<Term>>)?> ")" => todo!(),
    "charsub" "(" <string:StringExpr> "," <ofs:NumExpr<Term>> ")" => todo!(),
    "strcat" "(" <(<StrcatArgs> ","?)?> ")" => {
        <>.unwrap_or_else(String::new)
    },
};
StrcatArgs: String = {
    <StringExpr>,
    <mut accumulated:StrcatArgs> "," <string:StringExpr> => {
        accumulated.push_str(&string);
        accumulated
    }
}


// Some "utility" rules.

AnyIdent: String = {
    <identifier> lookahead_hack, // Code that doesn't care about the ident type does no lexer hacks.
    <local_ident>,
}

CommaList<T>: Vec<T> = {
    (<T> ",")*,
    <mut v:(<T> ",")*> <last:T> => {
        v.push(last);
        v
    }
}

CommaList1<T>: Vec<T> = {
    (<T> ",")+,
    <mut v:(<T> ",")*> <last:T> => {
        v.push(last);
        v
    }
}


// Hacks around lexer ↔ parser interaction.
// See the definition of `Token::LookaheadHack` for details.

DefProtectedIdent: (Location<'fstack>, String, Location<'fstack>) = {
    "def" <begin:@L> <ident:identifier> <end:@R> => {
        lexer.borrow_mut().expand_equs = true;
        (begin, ident, end)
    }
}
DefIdent: (Location<'fstack>, String, Location<'fstack>) = {
    <DefProtectedIdent> lookahead_hack,
}

RedefProtectedIdent: (Location<'fstack>, String, Location<'fstack>) = {
    "redef" <begin:@L> <ident:identifier> <end:@R> => {
        lexer.borrow_mut().expand_equs = true;
        (begin, ident, end)
    }
}
RedefIdent: (Location<'fstack>, String, Location<'fstack>) = {
    <RedefProtectedIdent> lookahead_hack,
}


// The lexer interface.

extern {
    type Location = Location<'fstack>;
    type Error = AsmError<'fstack>;

    enum Token {
        number => Token::Number(<u32>),
        string => Token::String(<String>),

        // Punctuation.
        "." => Token::Period,
        "," => Token::Comma,
        ":" => Token::Colon,
        "::" => Token::DoubleColon,
        "[" => Token::LeftBracket,
        "]" => Token::RightBracket,
        "(" => Token::LeftParens,
        ")" => Token::RightParens,
        newline => Token::Newline,

        // Operators.
        "!" => Token::LogicNot,
        "&&" => Token::LogicAnd,
        "||" => Token::LogicOr,
        ">" => Token::Gt,
        "<" => Token::Lt,
        ">=" => Token::Gte,
        "<=" => Token::Lte,
        "!=" => Token::LogicNe,
        "==" => Token::LogicEq,
        "+" => Token::Plus,
        "-" => Token::Minus,
        "*" => Token::Mul,
        "/" => Token::Div,
        "%" => Token::Mod,
        "**" => Token::Exponent,
        "<<" => Token::Shl,
        ">>" => Token::Shr,
        ">>>" => Token::UShr,
        "|" => Token::BitOr,
        "^" => Token::BitXor,
        "&" => Token::BitAnd,
        "~" => Token::Complement,

        // Built-in label/section functions.
        "def" => Token::Def,
        "bank" => Token::Bank,
        "align" => Token::Align,
        "sizeof" => Token::Sizeof,
        "startof" => Token::Startof,
        "opcode" => Token::Opcode,

        "sin" => Token::Sin,
        "cos" => Token::Cos,
        "tan" => Token::Tan,
        "asin" => Token::Asin,
        "acos" => Token::Acos,
        "atan" => Token::Atan,
        "atan2" => Token::Atan2,
        "fmul" => Token::FMul,
        "fdiv" => Token::FDiv,
        "fmod" => Token::FMod,
        "pow" => Token::Pow,
        "log" => Token::Log,
        "round" => Token::Round,
        "ceil" => Token::Ceil,
        "floor" => Token::Floor,

        "high" => Token::High,
        "low" => Token::Low,
        "isconst" => Token::IsConst,

        "strcmp" => Token::Strcmp,
        "strin" => Token::Strin,
        "strrin" => Token::Strrin,
        "strsub" => Token::Strsub,
        "strlen" => Token::Strlen,
        "strcat" => Token::Strcat,
        "strupr" => Token::Strupr,
        "strlwr" => Token::Strlwr,
        "strrpl" => Token::Strrpl,
        "strfmt" => Token::Strfmt,

        "charlen" => Token::Charlen,
        "charsub" => Token::Charsub,

        label => Token::Label(<String>),
        identifier => Token::Identifier(<String>),
        local_ident => Token::LocalIdent(<String>),
        anon_label_ref => Token::AnonLabelRef(<u32>, <bool>),

        // Assignment operators.
        "equ" => Token::Equ,
        "=" => Token::Eq,
        "rb" => Token::Rb,
        "rw" => Token::Rw,
        // No `Rl` here because it's also an instruction.
        "equs" => Token::Equs,

        // Compound assignment operators.
        "+=" => Token::AddEq,
        "-=" => Token::SubEq,
        "*=" => Token::MulEq,
        "/=" => Token::DivEq,
        "%=" => Token::ModEq,
        "<<=" => Token::ShlEq,
        ">>=" => Token::ShrEq,
        ">>>=" => Token::UShrEq,
        "|=" => Token::OrEq,
        "^=" => Token::XorEq,
        "&=" => Token::AndEq,

        // Directives.
        "rsreset" => Token::Rsreset,
        "rsset" => Token::Rsset,
        "redef" => Token::Redef,
        "export" => Token::Export,
        "purge" => Token::Purge,
        "print" => Token::Print,
        "println" => Token::Println,
        "if" => Token::If,
        "elif" => Token::Elif,
        "else" => Token::Else,
        "endc" => Token::Endc,
        "macro" => Token::Macro,
        "shift" => Token::Shift,
        "endm" => Token::Endm,
        "rept" => Token::Rept,
        "for" => Token::For,
        "break" => Token::Break,
        "endr" => Token::Endr,
        "section" => Token::Section,
        "fragment" => Token::Fragment,
        "load" => Token::Load,
        "endl" => Token::Endl,
        "pushs" => Token::Pushs,
        "pops" => Token::Pops,
        "union" => Token::Union,
        "nextu" => Token::Nextu,
        "endu" => Token::Endu,
        "ds" => Token::Ds,
        "db" => Token::Db,
        "dw" => Token::Dw,
        "dl" => Token::Dl,
        "include" => Token::Include,
        "incbin" => Token::Incbin,
        "charmap" => Token::Charmap,
        "newcharmap" => Token::Newcharmap,
        "setcharmap" => Token::Setcharmap,
        "pushc" => Token::Pushc,
        "popc" => Token::Popc,
        "fail" => Token::Fail,
        "warn" => Token::Warn,
        "fatal" => Token::Fatal,
        "assert" => Token::Assert,
        "static_assert" => Token::StaticAssert,
        "opt" => Token::Opt,
        "pusho" => Token::Pusho,
        "popo" => Token::Popo,

        // Memory types.
        "rom0" => Token::Rom0,
        "romx" => Token::Romx,
        "vram" => Token::Vram,
        "sram" => Token::Sram,
        "wram0" => Token::Wram0,
        "wramx" => Token::Wramx,
        "oam" => Token::Oam,
        "hram" => Token::Hram,

        // Instructions.
        "adc" => Token::Adc,
        "add" => Token::Add,
        "and" => Token::And,
        "bit" => Token::Bit,
        "call" => Token::Call,
        "ccf" => Token::Ccf,
        "cp" => Token::Cp,
        "cpl" => Token::Cpl,
        "daa" => Token::Daa,
        "dec" => Token::Dec,
        "di" => Token::Di,
        "ei" => Token::Ei,
        "halt" => Token::Halt,
        "inc" => Token::Inc,
        "jp" => Token::Jp,
        "jr" => Token::Jr,
        "ld" => Token::Ld,
        "ldi" => Token::Ldi,
        "ldd" => Token::Ldd,
        "ldh" => Token::Ldh,
        "nop" => Token::Nop,
        "or" => Token::Or,
        "pop" => Token::Pop,
        "push" => Token::Push,
        "res" => Token::Res,
        "ret" => Token::Ret,
        "reti" => Token::Reti,
        "rst" => Token::Rst,
        "rl" => Token::Rl,
        "rla" => Token::Rla,
        "rlc" => Token::Rlc,
        "rlca" => Token::Rlca,
        "rr" => Token::Rr,
        "rra" => Token::Rra,
        "rrc" => Token::Rrc,
        "rrca" => Token::Rrca,
        "sbc" => Token::Sbc,
        "scf" => Token::Scf,
        "set" => Token::Set,
        "stop" => Token::Stop,
        "sla" => Token::Sla,
        "sra" => Token::Sra,
        "srl" => Token::Srl,
        "sub" => Token::Sub,
        "swap" => Token::Swap,
        "xor" => Token::Xor,

        // Registers.
        "a" => Token::A,
        "b" => Token::B,
        "c" => Token::C,
        "d" => Token::D,
        "e" => Token::E,
        "h" => Token::H,
        "l" => Token::L,
        "af" => Token::Af,
        "bc" => Token::Bc,
        "de" => Token::De,
        "hl" => Token::Hl,
        "sp" => Token::Sp,
        "hld" => Token::Hld,
        "hli" => Token::Hli,

        // Conditions.
        "nz" => Token::Nz,
        "z" => Token::Z,
        "nc" => Token::Nc, // No `C` here because it's already a register.

        lookahead_hack => Token::LookaheadHack,
    }
}
